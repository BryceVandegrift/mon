#!/bin/sh

# Wrapper script for monero-wallet-cli to make it easier to use

# Monero wallet folder
WALLET_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/monerowallets
[ ! -d $WALLET_DIR ] && mkdir -p $WALLET_DIR

# Default remote node
NODE=monero.stackwallet.com

die() {
	# Print error and exit
	printf "%s\n" "$1" >&2
	exit 1
}

is_int() {
	# usage: is_int "number"
	printf %d "$1" >/dev/null 2>&1
}

cli() {
	monero-wallet-cli --log-file "/dev/null" $1 || \
		die "$0: monero-wallet-cli ran into an error"
	exit 0
}

daemon() {
	DATA_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/bitmonero
	[ ! -d $DATA_DIR ] && mkdir -p $DATA_DIR
	monerod --log-file "/dev/null" --non-interactive \
		--enable-dns-blocklist \
		--out-peers 32 --in-peers 64 \
		--prune-blockchain \
		--data-dir $DATA_DIR \
		--detach || die "$0: monerod ran into an error"
}

getwallet() {
	# grab list of wallets and ask user for wallet
	keylist=$(ls -1 $WALLET_DIR/*.keys | nl -s " " -w 3)
	echo "$keylist"
	printf "Please select a key: "
	read number

	is_int $number || die "$0: please enter a number"
	wallet=$(echo "$keylist" | grep "^.*$number " | awk '{ print $2 }')
}

normal() {
	# Run monero-wallet-cli normally
	echo "Starting monerod"
	daemon
	trap "pkill monerod" HUP INT QUIT TERM PWR EXIT

	getwallet
	[ -z "$wallet" ] && die "$0: wallet not opened"
	cli "--wallet-file $wallet"
}

remote() {
	# Run via remote node instead of daemon
	getwallet
	[ -z "$wallet" ] && die "$0: wallet not opened"
	cli "--wallet-file $wallet --daemon-host $NODE"
}

[ -z $1 ] && normal

case $1 in
	-n|--new)
		# Create a new wallet
		cli "--offline --generate-new-wallet $WALLET_DIR/$2" ;;
	-d|--daemon)
		# Only start daemon
		daemon ;;
	-r|--remote)
		# Use remote node
		remote ;;
	*)
		die "$0: could not parse argument" ;;
esac
